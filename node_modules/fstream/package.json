{
  "_args": [
    [
      {
        "raw": "fstream@~0.1.28",
        "scope": null,
        "escapedName": "fstream",
        "name": "fstream",
        "rawSpec": "~0.1.28",
        "spec": ">=0.1.28 <0.2.0",
        "type": "range"
      },
      "/Users/bengroulx/Documents/Development/bengroulx.com/node_modules/tar"
    ]
  ],
  "_from": "fstream@>=0.1.28 <0.2.0",
  "_id": "fstream@0.1.31",
  "_inCache": true,
  "_location": "/fstream",
  "_npmUser": {
    "name": "isaacs",
    "email": "i@izs.me"
  },
  "_npmVersion": "2.0.0-alpha-5",
  "_phantomChildren": {
    "natives": "1.1.0"
  },
  "_requested": {
    "raw": "fstream@~0.1.28",
    "scope": null,
    "escapedName": "fstream",
    "name": "fstream",
    "rawSpec": "~0.1.28",
    "spec": ">=0.1.28 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/tar"
  ],
  "_resolved": "https://registry.npmjs.org/fstream/-/fstream-0.1.31.tgz",
  "_shasum": "7337f058fbbbbefa8c9f561a28cab0849202c988",
  "_shrinkwrap": null,
  "_spec": "fstream@~0.1.28",
  "_where": "/Users/bengroulx/Documents/Development/bengroulx.com/node_modules/tar",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "bugs": {
    "url": "https://github.com/isaacs/fstream/issues"
  },
  "dependencies": {
    "graceful-fs": "~3.0.2",
    "inherits": "~2.0.0",
    "mkdirp": "0.5",
    "rimraf": "2"
  },
  "description": "Advanced file system stream things",
  "devDependencies": {
    "tap": ""
  },
  "directories": {},
  "dist": {
    "shasum": "7337f058fbbbbefa8c9f561a28cab0849202c988",
    "tarball": "https://registry.npmjs.org/fstream/-/fstream-0.1.31.tgz"
  },
  "engines": {
    "node": ">=0.6"
  },
  "gitHead": "3512b3d41b4c9b3ef15cf32a04e06b297f3dd6a4",
  "homepage": "https://github.com/isaacs/fstream#readme",
  "license": "BSD",
  "main": "fstream.js",
  "maintainers": [
    {
      "name": "isaacs",
      "email": "i@izs.me"
    }
  ],
  "name": "fstream",
  "optionalDependencies": {},
  "readme": "Like FS streams, but with stat on them, and supporting directories and\nsymbolic links, as well as normal files.  Also, you can use this to set\nthe stats on a file, even if you don't change its contents, or to create\na symlink, etc.\n\nSo, for example, you can \"write\" a directory, and it'll call `mkdir`.  You\ncan specify a uid and gid, and it'll call `chown`.  You can specify a\n`mtime` and `atime`, and it'll call `utimes`.  You can call it a symlink\nand provide a `linkpath` and it'll call `symlink`.\n\nNote that it won't automatically resolve symbolic links.  So, if you\ncall `fstream.Reader('/some/symlink')` then you'll get an object\nthat stats and then ends immediately (since it has no data).  To follow\nsymbolic links, do this: `fstream.Reader({path:'/some/symlink', follow:\ntrue })`.\n\nThere are various checks to make sure that the bytes emitted are the\nsame as the intended size, if the size is set.\n\n## Examples\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nThis will create the directories if they're missing, and then write\n`hello\\n` into the file, chmod it to 0755, and assert that 6 bytes have\nbeen written when it's done.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/file\"\n          , mode: 0755\n          , size: 6\n          , flags: \"a\"\n          })\n  .write(\"hello\\n\")\n  .end()\n```\n\nYou can pass flags in, if you want to append to a file.\n\n```javascript\nfstream\n  .Writer({ path: \"path/to/symlink\"\n          , linkpath: \"./file\"\n          , SymbolicLink: true\n          , mode: \"0755\" // octal strings supported\n          })\n  .end()\n```\n\nIf isSymbolicLink is a function, it'll be called, and if it returns\ntrue, then it'll treat it as a symlink.  If it's not a function, then\nany truish value will make a symlink, or you can set `type:\n'SymbolicLink'`, which does the same thing.\n\nNote that the linkpath is relative to the symbolic link location, not\nthe parent dir or cwd.\n\n```javascript\nfstream\n  .Reader(\"path/to/dir\")\n  .pipe(fstream.Writer(\"path/to/other/dir\"))\n```\n\nThis will do like `cp -Rp path/to/dir path/to/other/dir`.  If the other\ndir exists and isn't a directory, then it'll emit an error.  It'll also\nset the uid, gid, mode, etc. to be identical.  In this way, it's more\nlike `rsync -a` than simply a copy.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/isaacs/fstream.git"
  },
  "scripts": {
    "test": "tap examples/*.js"
  },
  "version": "0.1.31"
}
